// Use REMs with a pixel fallback for height sizing.
@mixin height($height) {
  height: (($height/1rem)*$base-font-size);
  height:($height);
}
// Use REMs with a pixel fallback for width sizing.
@mixin width($width) {
  width: (($width/1rem)*$base-font-size);
  width:($width);
  }
// Use REMs with a pixel fallback for line-height sizing.
@mixin line-height($line-height) {
  line-height: (($line-height/1rem)*$base-font-size);
  line-height:($line-height);
  }
// Use REMs with a pixel fallback for margin sizing.
@mixin margin($m-top, $m-right, $m-bottom, $m-left) {
  margin: (($m-top)*$base-font-size) (($m-right)*$base-font-size) (($m-bottom)*$base-font-size) (($m-left)*$base-font-size);
  margin: $m-top*1rem $m-right*1rem $m-bottom*1rem $m-left*1rem;
  }
// Use REMs with a pixel fallback for padding sizing.
@mixin padding($p-top, $p-right, $p-bottom, $p-left) {
  padding: (($p-top)*$base-font-size) (($p-right)*$base-font-size) (($p-bottom)*$base-font-size) (($p-left)*$base-font-size);
  padding: $p-top*1rem $p-right*1rem $p-bottom*1rem $p-left*1rem;
  }

// UBER Rem Mixin

@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $font-size: $base-font-size;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from font-size
      $new-rem-value: $value / $font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
      // % value given - don't add px or rem
      $px-values: join($px-values, #{$value});
      $rem-values: join($rem-values, #{$value});
    } @else if $value == auto {
      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}